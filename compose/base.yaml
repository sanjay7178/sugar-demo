version: "3.8"

services:
  api:
    build:
      context: ../services/api
      dockerfile: Dockerfile
    ports:
      - "8082:8081"
    depends_on:
      - database
      - cache
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@database:5432/${DB_NAME}
      - CACHE_URL=redis://cache:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - api_data:/app/data
    networks:
      - backend
      - frontend

  worker:
    image: nginx:${TAG:-latest}
    ports:
      - "8081:80"
    # build:
    #   context: ./services/worker
    #   dockerfile: Dockerfile
    depends_on:
      - database
      - cache
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@database:5432/${DB_NAME}
      - CACHE_URL=redis://cache:6379/1
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - worker_data:/app/data
    networks:
      - backend

  database:
    image: postgres:14-alpine
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - backend

  cache:
    image: redis:alpine
    volumes:
      - cache_data:/data
    networks:
      - backend

  monitoring:
    image: grafana/grafana:${TAG:-latest}
    ports:
      - "3000:3000"
    # build:
    #   context: ./services/monitoring
    #   dockerfile: Dockerfile
    depends_on:
      - api
      - worker
      - database
      - cache
    environment:
      - SERVICES_TO_MONITOR=api,worker,database,cache
      - MONITORING_INTERVAL=${MONITORING_INTERVAL:-30}
    networks:
      - backend
      - frontend

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true

volumes:
  api_data:
  worker_data:
  db_data:
  cache_data: